{"version":3,"file":"react-sandbox-src-components-LeftMenu-index-story.107d004a.iframe.bundle.js","mappings":";;AAiBA;;;;AAIA;;;AAKA;;;AAIA;;AAEA;;;;ACiDA;;;AAGA;;AAEA;;;;AAIA;AAGA;;;;AAIA;;AAEA;;;;;;;;AAUA;;;AAKA;AACA;;;;AAMA;AACA;;;AAYA;;AAwEA;;;;;AAOA;AACA;;AAIA;;AAIA;;;;AAIA;;;ACrNA;;;;AAkCA;;;AAGA;;;;;;;;;;AAUA;;;AAGA;AACA","sources":["webpack://charcoal-ui/./packages/react-sandbox/src/components/TextEllipsis/index.tsx","webpack://charcoal-ui/./packages/react-sandbox/src/components/MenuListItem/index.tsx","webpack://charcoal-ui/./packages/react-sandbox/src/components/LeftMenu/index.tsx"],"sourcesContent":["import styled, { css } from 'styled-components'\nimport { onlyText } from './helper'\n\nexport interface Props {\n  lineHeight: number\n  lineLimit?: number\n}\n\n/**\n * 複数行のテキストに表示行数制限を設けて`...`で省略する\n */\nexport const TextEllipsis = styled.div.attrs(\n  ({ children, title = onlyText(children) }) => ({\n    title: title !== '' ? title : undefined,\n  })\n)<Props>`\n  overflow: hidden;\n  line-height: ${(props) => props.lineHeight}px;\n  /* For english */\n  overflow-wrap: break-word;\n\n  ${({ lineLimit = 1, lineHeight }) =>\n    lineLimit === 1\n      ? css`\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        `\n      : css`\n          display: -webkit-box;\n          -webkit-box-orient: vertical;\n          -webkit-line-clamp: ${lineLimit};\n          /* Fallback for -webkit-line-clamp */\n          max-height: ${lineHeight * lineLimit}px;\n        `}\n`\n","import { useContext } from 'react'\nimport * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { theme } from '../../styled'\nimport { TextEllipsis } from '../TextEllipsis'\nimport {\n  LinkProps,\n  useComponentAbstraction,\n} from '../../_lib/ComponentAbstraction'\nimport { disabledSelector } from '@charcoal-ui/utils'\n\ninterface MenuListItemContextProps {\n  padding: 16 | 24\n}\n\nexport const MenuListItemContext =\n  React.createContext<MenuListItemContextProps>({ padding: 24 })\n\nexport interface MenuListItemBaseData {\n  primary: string | React.ReactNode // 表示アイテム名(上に表示)\n  secondary?: string // 表示アイテム名2(下に表示)\n  onClick?: (e: React.MouseEvent) => void\n  disabled?: boolean\n  gtmClass?: string\n  noHover?: boolean\n}\n\ninterface MenuListItemProps extends MenuListItemBaseData {\n  children?: React.ReactNode // 右寄せで表示したい要素\n}\n\nexport default function MenuListItem({\n  primary,\n  secondary,\n  onClick,\n  disabled = false,\n  noHover = false,\n  gtmClass,\n  children,\n}: MenuListItemProps) {\n  const { padding } = useContext(MenuListItemContext)\n\n  return (\n    <Item\n      hasSubLabel={secondary !== undefined}\n      onClick={(e) => !disabled && onClick && onClick(e)}\n      sidePadding={padding}\n      noHover={noHover}\n      noClick={onClick === undefined}\n      aria-disabled={disabled}\n      role={onClick !== undefined ? 'button' : undefined}\n      className={gtmClass !== undefined ? `gtm-${gtmClass}` : undefined}\n    >\n      <Labels>\n        <PrimaryText>\n          <TextEllipsis lineHeight={22} lineLimit={1}>\n            {primary}\n          </TextEllipsis>\n        </PrimaryText>\n        {secondary !== undefined && (\n          <SecondaryText>\n            <TextEllipsis lineHeight={22} lineLimit={1}>\n              {secondary}\n            </TextEllipsis>\n          </SecondaryText>\n        )}\n      </Labels>\n      {children}\n    </Item>\n  )\n}\n\ninterface ItemProps {\n  hasSubLabel: boolean\n  sidePadding: 16 | 24\n  noHover: boolean\n  noClick: boolean\n}\n\nconst Item = styled.div<ItemProps>`\n  display: flex;\n  height: ${(p) => (p.hasSubLabel ? 56 : 40)}px;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 ${(p) => p.sidePadding}px;\n  user-select: none;\n  cursor: ${(p) => (p.noClick ? 'default' : 'pointer')};\n  transition: 0.2s background-color;\n\n  &:hover {\n    ${(p) =>\n      !p.noHover &&\n      css`\n        background-color: ${({ theme }) => theme.color.surface3};\n      `}\n  }\n\n  ${theme((o) => o.disabled)}\n\n  ${disabledSelector} {\n    cursor: default;\n    pointer-events: none;\n\n    &:hover {\n      background-color: unset;\n    }\n  }\n`\n\nconst Labels = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst PrimaryText = styled.div`\n  color: ${(p) => p.theme.color.text2};\n  line-height: 22px;\n  font-size: 14px;\n  display: grid;\n`\n\nconst SecondaryText = styled.div`\n  color: ${(p) => p.theme.color.text3};\n  line-height: 18px;\n  font-size: 10px;\n`\n\ninterface MenuListLinkItemProps\n  extends MenuListItemBaseData,\n    Omit<LinkProps, 'to' | 'onClick' | 'children'> {\n  link: string\n  children?: React.ReactNode\n}\n\nexport function MenuListLinkItem({\n  link,\n  onClick,\n  disabled = false,\n  primary,\n  secondary,\n  gtmClass,\n  noHover,\n  children,\n  ...linkProps\n}: MenuListLinkItemProps) {\n  const { Link } = useComponentAbstraction()\n  const props: MenuListItemProps = {\n    disabled,\n    primary,\n    secondary,\n    gtmClass,\n    noHover,\n    children,\n  }\n\n  return disabled ? (\n    <span onClick={onClick}>\n      <MenuListItem {...props} />\n    </span>\n  ) : (\n    <A<typeof Link> as={Link} to={link} onClick={onClick} {...linkProps}>\n      <MenuListItem onClick={() => void 0} {...props} />\n    </A>\n  )\n}\n\nconst A = styled.a`\n  display: block;\n`\n\ninterface MenuListLinkItemWithIconProps extends MenuListLinkItemProps {\n  icon: React.ReactNode\n}\n\ninterface MenuListItemWithIconProps extends MenuListItemProps {\n  icon: React.ReactNode\n}\n\nexport function MenuListLinkItemWithIcon({\n  icon,\n  primary: text,\n  ...props\n}: MenuListLinkItemWithIconProps) {\n  const primary = (\n    <IconContainer>\n      <Icon>{icon}</Icon>\n      {text}\n    </IconContainer>\n  )\n  return <MenuListLinkItem primary={primary} {...props} />\n}\n\nexport function MenuListItemWithIcon({\n  icon,\n  primary: text,\n  ...props\n}: MenuListItemWithIconProps) {\n  const primary = (\n    <IconContainer>\n      <Icon>{icon}</Icon>\n      {text}\n    </IconContainer>\n  )\n  return <MenuListItem primary={primary} {...props} />\n}\n\nconst IconContainer = styled.div`\n  display: grid;\n  gap: 8px;\n  grid-auto-flow: column;\n  align-items: center;\n`\n\nconst Icon = styled.div`\n  color: ${({ theme }) => theme.color.text3};\n  display: flex;\n`\n\nexport const MenuListSpacer = styled.div`\n  height: 24px;\n`\n\nexport const MenuListLabel = styled.div`\n  padding: 0 16px;\n  font-size: 12px;\n  line-height: 16px;\n  color: ${({ theme }) => theme.color.text3};\n  margin-top: -2px;\n  margin-bottom: 6px;\n`\n","import styled from 'styled-components'\nimport { MenuListLinkItem } from '../MenuListItem'\nimport { useComponentAbstraction } from '../../_lib/ComponentAbstraction'\n\ninterface Props<ID extends string> {\n  links: readonly {\n    text: string\n    to: string\n    id: ID\n  }[]\n  active: ID\n}\n\nexport default function LeftMenu<ID extends string>({\n  links,\n  active,\n}: Props<ID>) {\n  const { Link } = useComponentAbstraction()\n  return (\n    <Container>\n      {links.map((link, index) => (\n        <Link to={link.to} key={index}>\n          <LinkItem aria-current={link.id === active || undefined}>\n            {link.text}\n          </LinkItem>\n        </Link>\n      ))}\n    </Container>\n  )\n}\n\nexport function LeftMenuContent<ID extends string>({ links }: Props<ID>) {\n  return (\n    <>\n      {links.map((link, index) => (\n        <MenuListLinkItem link={link.to} key={index} primary={link.text} />\n      ))}\n    </>\n  )\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`\n\nconst LinkItem = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.color.text3};\n  border-radius: 24px;\n  font-weight: bold;\n  font-size: 14px;\n  line-height: 22px;\n  padding: 0 16px;\n  height: 40px;\n  transition: 0.2s color;\n  &:hover {\n    transition: 0.2s color;\n    color: ${({ theme }) => theme.color.text2};\n  }\n  &[aria-current] {\n    color: ${({ theme }) => theme.color.text2};\n    background-color: ${({ theme }) => theme.color.surface3};\n  }\n`\n"],"names":[],"sourceRoot":""}