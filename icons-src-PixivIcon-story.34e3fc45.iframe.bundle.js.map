{"version":3,"file":"icons-src-PixivIcon-story.34e3fc45.iframe.bundle.js","mappings":";;;;;;;;;AAqHA;;;;AAMA;;;;AAMA;AACA;;;;;;;;;;;;;;;;AAkBA;;;;;AAOA","sources":["webpack://charcoal-ui/./packages/icons/src/PixivIcon.story.tsx"],"sourcesContent":["/// <reference types='@types/webpack-env' />\n\nimport styled, { createGlobalStyle } from 'styled-components'\nimport TestIconThatNeverExists from './16/TestIconThatNeverExists.svg'\nimport { PixivIcon, Props } from '@charcoal-ui/icons'\nimport { KnownIconFile, KNOWN_ICON_FILES } from './charcoalIconFiles'\nimport iconsV2 from '@charcoal-ui/icon-files/v2'\nimport type { Meta, StoryObj } from '@storybook/react'\n\ndeclare module '.' {\n  export interface KnownIconType {\n    '16/TestIconThatNeverExists': string\n    '16/TestIconFileThatNeverExists': () => Promise<string>\n  }\n}\n\nPixivIcon.extend({\n  // かぶらなそうな名前をつける\n  '16/TestIconThatNeverExists': TestIconThatNeverExists,\n  '16/TestIconFileThatNeverExists': () =>\n    import('./16/TestIconThatNeverExists.js').then((m) => m.default),\n  ...iconsV2,\n})\n\nconst meta: Meta<Props> = {\n  title: 'Icons/PixivIcon (<pixiv-icon>)',\n  argTypes: {\n    color: {\n      control: {\n        type: 'color',\n      },\n    },\n    name: {\n      control: {\n        type: 'select',\n        options: [...KNOWN_ICON_FILES, '16/TestIconThatNeverExists'],\n      },\n    },\n    scale: {\n      control: {\n        type: 'select',\n        options: [1, 2, 3],\n      },\n    },\n  },\n  parameters: {\n    storyshots: {\n      disable: true,\n    },\n  },\n  render(props) {\n    return (\n      <>\n        <IconGroup {...props} />\n        <hr />\n        <h2>Icons V2</h2>\n        <IconGroup {...props} group={groupedIconsV2} />\n      </>\n    )\n  },\n}\n\nfunction IconGroup({\n  scale,\n  color,\n  group = groupedIcons,\n}: Props & { group?: Record<string, KnownIconFile[]> }) {\n  return (\n    <>\n      {Object.entries(group).map(([groupName, icons]) => (\n        <Group key={groupName}>\n          <Heading>\n            {groupName} (scale: {scale})\n          </Heading>\n          <Grid>\n            {icons.map((name) => (\n              <IconDef color={color} key={name}>\n                <pixiv-icon key={scale} name={name} scale={scale} />\n                <div>{name}</div>\n              </IconDef>\n            ))}\n          </Grid>\n        </Group>\n      ))}\n      <Global />\n    </>\n  )\n}\n\nexport default meta\n\nconst groupIcons = (icons: KnownIconFile[]) =>\n  icons.reduce<Record<string, KnownIconFile[]>>((map, icon) => {\n    const [prefix] = icon.split('/')\n\n    if (prefix in map) {\n      map[prefix].push(icon)\n    } else {\n      map[prefix] = [icon]\n    }\n\n    return map\n  }, {})\nconst groupedIcons = groupIcons(KNOWN_ICON_FILES)\nconst groupedIconsV2 = groupIcons(Object.keys(iconsV2) as KnownIconFile[])\n\nconst Global = createGlobalStyle`\n  :root {\n    font-family: Helvetica, Arial, sans-serif;\n    color: rgba(#000, 0.88);\n  }\n\n  .icon-class {\n    transform: rotate(45deg);\n  }\n`\n\nconst Grid = styled.div`\n  display: grid;\n  gap: 8px;\n  grid-template-columns: 1fr 1fr 1fr;\n`\n\nconst Group = styled.div`\n  & + & {\n    margin-top: 64px;\n  }\n`\n\nconst IconDef = styled.div<{ color?: string }>`\n  color: ${({ color }) => color ?? '#000000'};\n  display: inline-flex;\n  align-items: center;\n  min-height: 32px;\n\n  pixiv-icon {\n    display: block;\n    flex-shrink: 0;\n\n    & + div {\n      flex: 1 0;\n      margin-left: 8px;\n      font-size: 14px;\n      line-height: 22px;\n    }\n  }\n`\n\nconst Heading = styled.h2`\n  font-size: 20px;\n  line-height: 28px;\n  font-weight: bold;\n  margin: 16px 0;\n`\n\nexport const Default: StoryObj<Props> = {\n  args: { scale: 1, color: '#000000' },\n}\n\nexport const WithAttributes: StoryObj<Props> = {\n  render: ({ color, name, scale }) => (\n    <div>\n      <IconDef color={color}>\n        <pixiv-icon class=\"icon-class\" name={name} scale={scale} />\n        <div>アイコンと文字</div>\n      </IconDef>\n      <Global />\n    </div>\n  ),\n  args: {\n    name: '16/Add',\n    scale: 1,\n    color: '#000000',\n  },\n}\n\nexport const WithUnsafe: StoryObj<Props> = {\n  render: ({ color, name, scale, ...args }) => {\n    return (\n      <>\n        <IconDef color={color}>\n          <pixiv-icon\n            unsafe-non-guideline-scale={args['unsafe-non-guideline-scale']}\n            name={name}\n            scale={scale}\n          />\n          アイコンと文字\n        </IconDef>\n        <Global />\n      </>\n    )\n  },\n  args: {\n    name: '16/Add',\n    'unsafe-non-guideline-scale': '3.75',\n    color: '#000000',\n  },\n}\n\nexport const RawIconFile: StoryObj<Props> = {\n  render: ({ color, name, scale }) => {\n    return (\n      <>\n        <IconDef color={color}>\n          <pixiv-icon name={name} scale={scale} />\n          アイコンと文字\n        </IconDef>\n        <Global />\n      </>\n    )\n  },\n  args: {\n    name: '16/TestIconFileThatNeverExists',\n    scale: 1,\n    color: '#000000',\n  },\n}\n"],"names":[],"sourceRoot":""}