"use strict";(self.webpackChunkcharcoal_ui=self.webpackChunkcharcoal_ui||[]).push([[83983],{"./packages/react/src/_lib/useClassNames.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{U:()=>useClassNames});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");function useClassNames(...classNames){return(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>classNames.filter((v=>v)).join(" ")),[classNames])}},"./packages/react/src/components/Checkbox/index.story.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Checked:()=>Checked,Default:()=>Default,Disabled:()=>Disabled,Invalid:()=>Invalid,Label:()=>Label,ReadOnly:()=>ReadOnly,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js"),___WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/react/src/components/Checkbox/index.tsx"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");const __WEBPACK_DEFAULT_EXPORT__={title:"react/Checkbox",component:___WEBPACK_IMPORTED_MODULE_2__.A,parameters:{layout:"centered"}},Default={argTypes:{checked:{type:"boolean"},children:{type:"string"},disabled:{type:"boolean"},invalid:{type:"boolean"},readOnly:{type:"boolean"}},render:function Render(props){const[checked,setChecked]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(props.checked),handleChange=(0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((isSelected=>{setChecked(isSelected)}),[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(___WEBPACK_IMPORTED_MODULE_2__.A,{...props,checked:props.checked??checked,onChange:handleChange})}},Label={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(___WEBPACK_IMPORTED_MODULE_2__.A,{children:"Checkbox"})},Checked={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(___WEBPACK_IMPORTED_MODULE_2__.A,{checked:!0,children:"Checked"})},Disabled={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(___WEBPACK_IMPORTED_MODULE_2__.A,{disabled:!0,children:"Disabled"})},ReadOnly={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(___WEBPACK_IMPORTED_MODULE_2__.A,{checked:!0,name:"labelled",readOnly:!0,children:"ReadOnly"})},Invalid={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(___WEBPACK_IMPORTED_MODULE_2__.A,{name:"labelled",invalid:!0,children:"Invalid"})};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  argTypes: {\n    checked: {\n      type: 'boolean'\n    },\n    children: {\n      type: 'string'\n    },\n    disabled: {\n      type: 'boolean'\n    },\n    invalid: {\n      type: 'boolean'\n    },\n    readOnly: {\n      type: 'boolean'\n    }\n  },\n  render: function Render(props) {\n    const [checked, setChecked] = useState(props.checked);\n    const handleChange = useCallback((isSelected: boolean) => {\n      setChecked(isSelected);\n    }, []);\n    return <Checkbox {...props} checked={props.checked ?? checked} onChange={handleChange} />;\n  }\n}",...Default.parameters?.docs?.source}}},Label.parameters={...Label.parameters,docs:{...Label.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    return <Checkbox>Checkbox</Checkbox>;\n  }\n}",...Label.parameters?.docs?.source}}},Checked.parameters={...Checked.parameters,docs:{...Checked.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    return <Checkbox checked>Checked</Checkbox>;\n  }\n}",...Checked.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    return <Checkbox disabled>Disabled</Checkbox>;\n  }\n}",...Disabled.parameters?.docs?.source}}},ReadOnly.parameters={...ReadOnly.parameters,docs:{...ReadOnly.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    return <Checkbox checked name="labelled" readOnly>\n        ReadOnly\n      </Checkbox>;\n  }\n}',...ReadOnly.parameters?.docs?.source}}},Invalid.parameters={...Invalid.parameters,docs:{...Invalid.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    return <Checkbox name="labelled" invalid>\n        Invalid\n      </Checkbox>;\n  }\n}',...Invalid.parameters?.docs?.source}}}}}]);