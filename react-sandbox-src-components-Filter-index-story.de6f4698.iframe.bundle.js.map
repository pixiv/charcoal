{"version":3,"file":"react-sandbox-src-components-Filter-index-story.de6f4698.iframe.bundle.js","mappings":";;;;;;;;;;AAyHA;;;;;;AAMA;;;AAGA;AAGA;;;AAGA;AAGA;AACA;;;AAGA;;;;AAOA;;;AAKA;;;AAGA;;;AAKA;AACA;AAGA;AACA;AAOA;AACA;AACA;AACA;AAGA","sources":["webpack://charcoal-ui/./packages/react-sandbox/src/components/Filter/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { maxWidth } from '@charcoal-ui/utils'\nimport {\n  LinkProps,\n  useComponentAbstraction,\n} from '../../_lib/ComponentAbstraction'\n\ninterface Props<T extends HTMLElement> {\n  active?: boolean\n  hover?: boolean\n  reactive?: boolean\n  children: React.ReactNode\n  onClick?: React.MouseEventHandler<T>\n}\n\ninterface FilterIconButtonProps extends Props<HTMLButtonElement> {\n  width?: number\n  height?: number\n}\n\nexport const FilterButton = React.forwardRef(function FilterButton(\n  {\n    onClick,\n    children,\n    active = false,\n    hover,\n    reactive = false,\n  }: Props<HTMLButtonElement>,\n  ref: React.Ref<HTMLButtonElement>\n) {\n  return (\n    <ButtonLike\n      active={active}\n      reactive={reactive}\n      hover={hover}\n      onClick={active && !reactive ? undefined : onClick}\n      ref={ref}\n    >\n      {children}\n    </ButtonLike>\n  )\n})\n\nexport const FilterIconButton = React.forwardRef(function FilterIconButton(\n  {\n    onClick,\n    children,\n    active = false,\n    hover,\n    reactive = false,\n    width,\n    height,\n  }: FilterIconButtonProps,\n  ref: React.Ref<HTMLButtonElement>\n) {\n  return (\n    <StyledButtonLike\n      active={active}\n      reactive={reactive}\n      hover={hover}\n      onClick={active && !reactive ? undefined : onClick}\n      ref={ref}\n      buttonWidth={width}\n      buttonHeight={height}\n    >\n      {children}\n    </StyledButtonLike>\n  )\n})\n\nexport const FilterLink = React.forwardRef(function FilterLink(\n  {\n    onClick,\n    children,\n    active = false,\n    hover,\n    reactive = false,\n    ...props\n  }: Props<HTMLAnchorElement> & LinkProps,\n  ref: React.Ref<HTMLAnchorElement>\n) {\n  const { Link } = useComponentAbstraction()\n  if (active && !reactive) {\n    return (\n      <PlainElement active hover={hover} ref={ref}>\n        {children}\n      </PlainElement>\n    )\n  } else {\n    return (\n      <Link {...props} onClick={onClick}>\n        <PlainElement\n          active={active}\n          reactive={reactive}\n          hover={hover}\n          ref={ref}\n        >\n          {children}\n        </PlainElement>\n      </Link>\n    )\n  }\n})\n\ninterface ButtonCssProps {\n  active?: boolean\n  hover?: boolean\n  reactive?: boolean\n}\n\nconst buttonCss = css<ButtonCssProps>`\n  display: block;\n  outline: none;\n  border: none;\n  padding: 9px 24px;\n  font-size: 14px;\n  line-height: 22px;\n  font-weight: bold;\n  border-radius: /* absurd radius, but ensures rounded corners */ 2000px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.color.text3};\n  cursor: pointer;\n  user-select: none;\n  background-color: transparent;\n\n  &:hover {\n    color: ${({ theme }) => theme.color.text2};\n  }\n\n  ${({ hover = false }) =>\n    hover &&\n    css`\n      color: ${({ theme }) => theme.color.text2};\n    `}\n\n  ${({ active = false }) =>\n    active &&\n    css`\n      background-color: ${({ theme }) => theme.color.surface3};\n      color: ${({ theme }) => theme.color.text2};\n    `}\n\n  ${({ active = false, reactive = false }) =>\n    active &&\n    !reactive &&\n    css`\n      cursor: default;\n    `}\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    padding: 5px 16px;\n  }\n`\n\nconst padding0Css = css`\n  padding: 0;\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    padding: 0;\n  }\n`\n\nconst ButtonLike = styled.button<ButtonCssProps>`\n  ${buttonCss}\n`\n\nconst PlainElement = styled.span<ButtonCssProps>`\n  ${buttonCss}\n`\n\ntype StyledButtonLikeProps = {\n  buttonWidth: number | undefined\n  buttonHeight: number | undefined\n}\nconst StyledButtonLike = styled(ButtonLike)<StyledButtonLikeProps>`\n  ${padding0Css};\n  ${(p) => p.buttonWidth !== undefined && `width: ${p.buttonWidth}px;`}\n  ${(p) => p.buttonHeight !== undefined && `height: ${p.buttonHeight}px;`}\n`\n\nconst Filter = styled.div`\n  display: flex;\n`\n\nexport default Filter\n"],"names":[],"sourceRoot":""}