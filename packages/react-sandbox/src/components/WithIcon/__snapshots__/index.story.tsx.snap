// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sandbox/WithIcon Collapse smoke-test 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c4 {
  min-width: 0;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: none;
  margin-right: 4px;
}

.c2 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c2 > svg {
  display: block;
}

.c3 {
  display: inline-block;
  width: 16px;
  height: 16px;
  background-color: currentColor;
}

<div data-dark="false">
  <div css="
        ,function interpolate({
      theme
    }) {
      if (!(0,_util__WEBPACK_IMPORTED_MODULE_2__.isPresent)(theme)) {
        // テーマが入っていない場合は復旧不可能なのでエラーにする
        throw _util__WEBPACK_IMPORTED_MODULE_2__.noThemeProvider;
      }
      const internals = [
      // ユーザーが定義したルール
      ...(0,_util__WEBPACK_IMPORTED_MODULE_2__.wrapArray)(
      /**
       * こう書いてはいけない
       *
       * ❌
       * \`\`\`ts
       * const o = createO(theme)
       * const declaration = spec(o)
       * \`\`\`
       *
       * \`o\` を一時変数に入れてしまうと型 \`T\` の具象化が行われるので関数内に書く
       */
      specFn( /** o = */(0,_builders_o__WEBPACK_IMPORTED_MODULE_4__[&quot;default&quot;])(theme))),
      // 必ず挿入される共通のルール
      (0,_builders_transition__WEBPACK_IMPORTED_MODULE_5__[&quot;default&quot;])(theme)].filter(nonBlank);
      return (0,_internals__WEBPACK_IMPORTED_MODULE_6__.toCSSObjects)(internals);
    },
        display: flex;
      ">
    <div css="
          background-color: ,({
        theme
      }) => (0,_charcoal_ui_utils__WEBPACK_IMPORTED_MODULE_6__.applyEffect)(theme.color.brand, theme.elementEffect.disabled),;
        ">
      <div class="c0">
        <div class="c1">
          <div class="c2">
            <div class="c3">
            </div>
          </div>
        </div>
        <div class="c4">
          Selection
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Sandbox/WithIcon Default smoke-test 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c1 {
  min-width: 0;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  height: 0;
  width: 16px;
  visibility: visible;
  margin-left: 4px;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  position: absolute;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c3 > svg {
  display: block;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  vertical-align: top;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  line-height: 22px;
  height: 22px;
}

.c4::before {
  content: '';
  display: inline-block;
  height: 16px;
  width: 16px;
  background-color: currentColor;
}

<div data-dark="false">
  <div css="
        ,function interpolate({
      theme
    }) {
      if (!(0,_util__WEBPACK_IMPORTED_MODULE_2__.isPresent)(theme)) {
        // テーマが入っていない場合は復旧不可能なのでエラーにする
        throw _util__WEBPACK_IMPORTED_MODULE_2__.noThemeProvider;
      }
      const internals = [
      // ユーザーが定義したルール
      ...(0,_util__WEBPACK_IMPORTED_MODULE_2__.wrapArray)(
      /**
       * こう書いてはいけない
       *
       * ❌
       * \`\`\`ts
       * const o = createO(theme)
       * const declaration = spec(o)
       * \`\`\`
       *
       * \`o\` を一時変数に入れてしまうと型 \`T\` の具象化が行われるので関数内に書く
       */
      specFn( /** o = */(0,_builders_o__WEBPACK_IMPORTED_MODULE_4__[&quot;default&quot;])(theme))),
      // 必ず挿入される共通のルール
      (0,_builders_transition__WEBPACK_IMPORTED_MODULE_5__[&quot;default&quot;])(theme)].filter(nonBlank);
      return (0,_internals__WEBPACK_IMPORTED_MODULE_6__.toCSSObjects)(internals);
    },
        display: flex;
      ">
    <div css="
          background-color: ,({
        theme
      }) => (0,_charcoal_ui_utils__WEBPACK_IMPORTED_MODULE_6__.applyEffect)(theme.color.brand, theme.elementEffect.disabled),;
        ">
      <div class="c0">
        <div class="c1">
          Menu
        </div>
        <div width="16"
             class="c2"
        >
          <div class="c3">
            <div class="c4">
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Sandbox/WithIcon Hide smoke-test 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c4 {
  min-width: 0;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  visibility: hidden;
  margin-right: 4px;
}

.c2 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c2 > svg {
  display: block;
}

.c3 {
  display: inline-block;
  width: 16px;
  height: 16px;
  background-color: currentColor;
}

<div data-dark="false">
  <div css="
        ,function interpolate({
      theme
    }) {
      if (!(0,_util__WEBPACK_IMPORTED_MODULE_2__.isPresent)(theme)) {
        // テーマが入っていない場合は復旧不可能なのでエラーにする
        throw _util__WEBPACK_IMPORTED_MODULE_2__.noThemeProvider;
      }
      const internals = [
      // ユーザーが定義したルール
      ...(0,_util__WEBPACK_IMPORTED_MODULE_2__.wrapArray)(
      /**
       * こう書いてはいけない
       *
       * ❌
       * \`\`\`ts
       * const o = createO(theme)
       * const declaration = spec(o)
       * \`\`\`
       *
       * \`o\` を一時変数に入れてしまうと型 \`T\` の具象化が行われるので関数内に書く
       */
      specFn( /** o = */(0,_builders_o__WEBPACK_IMPORTED_MODULE_4__[&quot;default&quot;])(theme))),
      // 必ず挿入される共通のルール
      (0,_builders_transition__WEBPACK_IMPORTED_MODULE_5__[&quot;default&quot;])(theme)].filter(nonBlank);
      return (0,_internals__WEBPACK_IMPORTED_MODULE_6__.toCSSObjects)(internals);
    },
        display: flex;
      ">
    <div css="
          background-color: ,({
        theme
      }) => (0,_charcoal_ui_utils__WEBPACK_IMPORTED_MODULE_6__.applyEffect)(theme.color.brand, theme.elementEffect.disabled),;
        ">
      <div class="c0">
        <div class="c1">
          <div class="c2">
            <div class="c3">
            </div>
          </div>
        </div>
        <div class="c4">
          Selection
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Sandbox/WithIcon LongText smoke-test 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c1 {
  min-width: 0;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  visibility: visible;
  margin-left: 4px;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c3 > svg {
  display: block;
}

.c4 {
  display: inline-block;
  width: 16px;
  height: 16px;
  background-color: currentColor;
}

<div data-dark="false">
  <div css="
        ,function interpolate({
      theme
    }) {
      if (!(0,_util__WEBPACK_IMPORTED_MODULE_2__.isPresent)(theme)) {
        // テーマが入っていない場合は復旧不可能なのでエラーにする
        throw _util__WEBPACK_IMPORTED_MODULE_2__.noThemeProvider;
      }
      const internals = [
      // ユーザーが定義したルール
      ...(0,_util__WEBPACK_IMPORTED_MODULE_2__.wrapArray)(
      /**
       * こう書いてはいけない
       *
       * ❌
       * \`\`\`ts
       * const o = createO(theme)
       * const declaration = spec(o)
       * \`\`\`
       *
       * \`o\` を一時変数に入れてしまうと型 \`T\` の具象化が行われるので関数内に書く
       */
      specFn( /** o = */(0,_builders_o__WEBPACK_IMPORTED_MODULE_4__[&quot;default&quot;])(theme))),
      // 必ず挿入される共通のルール
      (0,_builders_transition__WEBPACK_IMPORTED_MODULE_5__[&quot;default&quot;])(theme)].filter(nonBlank);
      return (0,_internals__WEBPACK_IMPORTED_MODULE_6__.toCSSObjects)(internals);
    },
        display: flex;
      ">
    <div css="
      width: 200px;
    ">
      <div class="c0">
        <div class="c1">
          Long Long Long Long Long Long Long Long Long Long Text
        </div>
        <div class="c2">
          <div class="c3">
            <div class="c4">
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Sandbox/WithIcon LongTextOverflow smoke-test 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c1 {
  white-space: nowrap;
  text-overflow: ellipsis;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  visibility: visible;
  margin-left: 4px;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c3 > svg {
  display: block;
}

.c4 {
  display: inline-block;
  width: 16px;
  height: 16px;
  background-color: currentColor;
}

<div data-dark="false">
  <div css="
        ,function interpolate({
      theme
    }) {
      if (!(0,_util__WEBPACK_IMPORTED_MODULE_2__.isPresent)(theme)) {
        // テーマが入っていない場合は復旧不可能なのでエラーにする
        throw _util__WEBPACK_IMPORTED_MODULE_2__.noThemeProvider;
      }
      const internals = [
      // ユーザーが定義したルール
      ...(0,_util__WEBPACK_IMPORTED_MODULE_2__.wrapArray)(
      /**
       * こう書いてはいけない
       *
       * ❌
       * \`\`\`ts
       * const o = createO(theme)
       * const declaration = spec(o)
       * \`\`\`
       *
       * \`o\` を一時変数に入れてしまうと型 \`T\` の具象化が行われるので関数内に書く
       */
      specFn( /** o = */(0,_builders_o__WEBPACK_IMPORTED_MODULE_4__[&quot;default&quot;])(theme))),
      // 必ず挿入される共通のルール
      (0,_builders_transition__WEBPACK_IMPORTED_MODULE_5__[&quot;default&quot;])(theme)].filter(nonBlank);
      return (0,_internals__WEBPACK_IMPORTED_MODULE_6__.toCSSObjects)(internals);
    },
        display: flex;
      ">
    <div css="
      width: 200px;
    ">
      <div class="c0">
        <div class="c1">
          Long Long Long Long Long Long Long Long Long Long Text
        </div>
        <div class="c2">
          <div class="c3">
            <div class="c4">
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Sandbox/WithIcon Naive smoke-test 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c1 {
  min-width: 0;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  visibility: visible;
  margin-left: 4px;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c3 > svg {
  display: block;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  vertical-align: top;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  line-height: 22px;
  height: 22px;
}

.c4::before {
  content: '';
  display: inline-block;
  height: 16px;
  width: 16px;
  background-color: currentColor;
}

<div data-dark="false">
  <div css="
        ,function interpolate({
      theme
    }) {
      if (!(0,_util__WEBPACK_IMPORTED_MODULE_2__.isPresent)(theme)) {
        // テーマが入っていない場合は復旧不可能なのでエラーにする
        throw _util__WEBPACK_IMPORTED_MODULE_2__.noThemeProvider;
      }
      const internals = [
      // ユーザーが定義したルール
      ...(0,_util__WEBPACK_IMPORTED_MODULE_2__.wrapArray)(
      /**
       * こう書いてはいけない
       *
       * ❌
       * \`\`\`ts
       * const o = createO(theme)
       * const declaration = spec(o)
       * \`\`\`
       *
       * \`o\` を一時変数に入れてしまうと型 \`T\` の具象化が行われるので関数内に書く
       */
      specFn( /** o = */(0,_builders_o__WEBPACK_IMPORTED_MODULE_4__[&quot;default&quot;])(theme))),
      // 必ず挿入される共通のルール
      (0,_builders_transition__WEBPACK_IMPORTED_MODULE_5__[&quot;default&quot;])(theme)].filter(nonBlank);
      return (0,_internals__WEBPACK_IMPORTED_MODULE_6__.toCSSObjects)(internals);
    },
        display: flex;
      ">
    <div css="
          background-color: ,({
        theme
      }) => (0,_charcoal_ui_utils__WEBPACK_IMPORTED_MODULE_6__.applyEffect)(theme.color.brand, theme.elementEffect.disabled),;
        ">
      <div class="c0">
        <div class="c1">
          Menu
        </div>
        <div class="c2">
          <div class="c3">
            <div class="c4">
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Sandbox/WithIcon Performance smoke-test 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c1 {
  min-width: 0;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  height: 0;
  width: 16px;
  visibility: visible;
  margin-left: 4px;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  position: absolute;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c3 > svg {
  display: block;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  vertical-align: top;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  line-height: 22px;
  height: 22px;
}

.c4::before {
  content: '';
  display: inline-block;
  height: 16px;
  width: 16px;
  background-color: currentColor;
}

<div data-dark="false">
  <div css="
        ,function interpolate({
      theme
    }) {
      if (!(0,_util__WEBPACK_IMPORTED_MODULE_2__.isPresent)(theme)) {
        // テーマが入っていない場合は復旧不可能なのでエラーにする
        throw _util__WEBPACK_IMPORTED_MODULE_2__.noThemeProvider;
      }
      const internals = [
      // ユーザーが定義したルール
      ...(0,_util__WEBPACK_IMPORTED_MODULE_2__.wrapArray)(
      /**
       * こう書いてはいけない
       *
       * ❌
       * \`\`\`ts
       * const o = createO(theme)
       * const declaration = spec(o)
       * \`\`\`
       *
       * \`o\` を一時変数に入れてしまうと型 \`T\` の具象化が行われるので関数内に書く
       */
      specFn( /** o = */(0,_builders_o__WEBPACK_IMPORTED_MODULE_4__[&quot;default&quot;])(theme))),
      // 必ず挿入される共通のルール
      (0,_builders_transition__WEBPACK_IMPORTED_MODULE_5__[&quot;default&quot;])(theme)].filter(nonBlank);
      return (0,_internals__WEBPACK_IMPORTED_MODULE_6__.toCSSObjects)(internals);
    },
        display: flex;
      ">
    <div css="
          background-color: ,({
        theme
      }) => (0,_charcoal_ui_utils__WEBPACK_IMPORTED_MODULE_6__.applyEffect)(theme.color.brand, theme.elementEffect.disabled),;
        ">
      <div class="c0">
        <div class="c1">
          Menu
        </div>
        <div width="16"
             class="c2"
        >
          <div class="c3">
            <div class="c4">
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Sandbox/WithIcon Prefix smoke-test 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c4 {
  min-width: 0;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  height: 0;
  width: 16px;
  visibility: visible;
  margin-right: 4px;
}

.c2 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  position: absolute;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c2 > svg {
  display: block;
}

.c3 {
  display: inline-block;
  width: 16px;
  height: 16px;
  background-color: currentColor;
}

<div data-dark="false">
  <div css="
        ,function interpolate({
      theme
    }) {
      if (!(0,_util__WEBPACK_IMPORTED_MODULE_2__.isPresent)(theme)) {
        // テーマが入っていない場合は復旧不可能なのでエラーにする
        throw _util__WEBPACK_IMPORTED_MODULE_2__.noThemeProvider;
      }
      const internals = [
      // ユーザーが定義したルール
      ...(0,_util__WEBPACK_IMPORTED_MODULE_2__.wrapArray)(
      /**
       * こう書いてはいけない
       *
       * ❌
       * \`\`\`ts
       * const o = createO(theme)
       * const declaration = spec(o)
       * \`\`\`
       *
       * \`o\` を一時変数に入れてしまうと型 \`T\` の具象化が行われるので関数内に書く
       */
      specFn( /** o = */(0,_builders_o__WEBPACK_IMPORTED_MODULE_4__[&quot;default&quot;])(theme))),
      // 必ず挿入される共通のルール
      (0,_builders_transition__WEBPACK_IMPORTED_MODULE_5__[&quot;default&quot;])(theme)].filter(nonBlank);
      return (0,_internals__WEBPACK_IMPORTED_MODULE_6__.toCSSObjects)(internals);
    },
        display: flex;
      ">
    <div css="
          background-color: ,({
        theme
      }) => (0,_charcoal_ui_utils__WEBPACK_IMPORTED_MODULE_6__.applyEffect)(theme.color.brand, theme.elementEffect.disabled),;
        ">
      <div class="c0">
        <div width="16"
             class="c1"
        >
          <div class="c2">
            <div class="c3">
            </div>
          </div>
        </div>
        <div class="c4">
          Selection
        </div>
      </div>
    </div>
  </div>
</div>
`;
