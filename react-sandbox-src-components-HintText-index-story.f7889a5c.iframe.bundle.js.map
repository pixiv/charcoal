{"version":3,"file":"react-sandbox-src-components-HintText-index-story.f7889a5c.iframe.bundle.js","mappings":";AA0BA;;;ACKA;;AAQA;AACA;;;;;AASA;;;AAOA;;;AAGA;;;AAKA;AACA;;;;AAUA;;ACjCA;AAEA;AACA;;;;AAUA","sources":["webpack://charcoal-ui/./packages/react-sandbox/src/components/icons/InfoIcon.tsx","webpack://charcoal-ui/./packages/react-sandbox/src/components/HintText/index.tsx","webpack://charcoal-ui/./packages/react-sandbox/src/components/icons/Base.tsx"],"sourcesContent":["import styled from 'styled-components'\nimport IconBase from './Base'\n\nconst size = 16\n\nexport default function InfoIcon() {\n  const path = (\n    <>\n      <path\n        d=\"M8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0C12.4183\n           0 16 3.58172 16 8C16 12.4183 12.4183 16 8 16Z\"\n      />\n      <Path\n        d=\"M14 8C14 11.3137 11.3137 14 8 14C4.68629 14 2 11.3137 2 8C2 4.68629\n           4.68629 2 8 2C11.3137 2 14 4.68629 14 8ZM8 6.25C8.69036 6.25 9.25 5.69036\n           9.25 5C9.25 4.30964 8.69036 3.75 8 3.75C7.30964 3.75 6.75 4.30964 6.75\n           5C6.75 5.69036 7.30964 6.25 8 6.25ZM7 7.75V11.25C7 11.8023 7.44772 12.25\n           8 12.25C8.55228 12.25 9 11.8023 9 11.25V7.75C9 7.19772 8.55228 6.75 8\n           6.75C7.44772 6.75 7 7.19772 7 7.75Z\"\n      />\n    </>\n  )\n  return <IconBase viewBoxSize={size} size={size} currentColor path={path} />\n}\n\nconst Path = styled.path`\n  fill: ${({ theme }) => theme.color.surface1};\n  fill-rule: evenodd;\n`\n","import * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { theme } from '../../styled'\nimport InfoIcon from '../icons/InfoIcon'\nimport { maxWidth } from '@charcoal-ui/utils'\n\ntype Context = 'page' | 'section'\ninterface Props {\n  children: React.ReactNode\n  context: Context\n  className?: string\n}\n\n/**\n * @deprecated use HintText from @charcoal-ui/react\n */\nexport default function HintText({ children, context, className }: Props) {\n  return (\n    <Container\n      className={className}\n      {...styledProps({ children, context, className })}\n    >\n      <IconWrap>\n        <InfoIcon />\n      </IconWrap>\n      <Text>{children}</Text>\n    </Container>\n  )\n}\n\nconst Container = styled.div<ReturnType<typeof styledProps>>`\n  ${(p) =>\n    theme((o) => [\n      o.bg.surface3,\n      o.borderRadius(8),\n      o.padding.vertical(p.default.vertical),\n      o.padding.horizontal(p.default.horizontal),\n    ])}\n\n  @media ${({ theme: t }) => maxWidth(t.breakpoint.screen1)} {\n    ${(p) =>\n      theme((o) => [\n        o.padding.vertical(p.screen1.vertical),\n        o.padding.horizontal(p.screen1.horizontal),\n      ])}\n  }\n\n  display: flex;\n  align-items: flex-start;\n  ${(p) =>\n    p.context === 'page' &&\n    css`\n      justify-content: center;\n    `}\n`\n\nconst IconWrap = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${(p) => p.theme.color.text4};\n  height: 22px;\n  margin: -4px 4px -4px 0;\n`\n\nconst Text = styled.p`\n  ${theme((o) => [o.font.text2, o.typography(14)])}\n  margin: 0;\n  min-width: 0;\n  overflow-wrap: break-word;\n`\n\nfunction styledProps(props: Props) {\n  return { ...props, ...contextToProps(props.context) }\n}\n\nfunction contextToProps(context: Context) {\n  switch (context) {\n    case 'page':\n      return {\n        default: {\n          horizontal: 40,\n          vertical: 24,\n        },\n        screen1: {\n          horizontal: 16,\n          vertical: 16,\n        },\n      } as const\n    case 'section':\n      return {\n        default: {\n          horizontal: 16,\n          vertical: 16,\n        },\n        screen1: {\n          horizontal: 16,\n          vertical: 16,\n        },\n      } as const\n  }\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\n\nexport type IconSizes = 16 | 24 | 32\n\ninterface Props {\n  path: string | React.ReactNode\n  viewBoxSize: number\n  size?: IconSizes | 40 | 48 | 64 | 72\n  transform?: string\n  currentColor?: boolean\n  fillRule?: 'nonzero' | 'evenodd'\n  clipRule?: 'nonzero' | 'evenodd' | 'inherit'\n}\n\nexport default function IconBase({\n  size = 24,\n  viewBoxSize,\n  currentColor,\n  path,\n  transform,\n  fillRule,\n  clipRule,\n}: Props) {\n  return (\n    <Icon\n      viewBox={`0 0 ${viewBoxSize} ${viewBoxSize}`}\n      size={size}\n      currentColor={currentColor}\n    >\n      <IconBasePath\n        path={path}\n        transform={transform}\n        fillRule={fillRule}\n        clipRule={clipRule}\n      />\n    </Icon>\n  )\n}\n\nconst Icon = styled.svg<{ size: number; currentColor?: boolean }>`\n  stroke: none;\n  fill: ${({ currentColor = false, theme }) =>\n    currentColor ? 'currentColor' : theme.color.text2};\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  line-height: 0;\n  font-size: 0;\n  vertical-align: middle;\n`\n\ntype IconBasePathProps = Pick<\n  Props,\n  'path' | 'transform' | 'fillRule' | 'clipRule'\n>\nexport const IconBasePath = ({\n  path,\n  transform,\n  fillRule,\n  clipRule,\n}: IconBasePathProps) => {\n  if (typeof path === 'string') {\n    return (\n      <path\n        d={path}\n        transform={transform}\n        fillRule={fillRule}\n        clipRule={clipRule}\n      />\n    )\n  } else {\n    return <>{path}</>\n  }\n}\n"],"names":[],"sourceRoot":""}