{"version":3,"file":"react-sandbox-src-components-Layout-index-story.9c300d56.iframe.bundle.js","mappings":";;;;;AA8DA;;;;AAIA;;AAIA;;AAEA;;AAEA;AACA;;;AAKA;;AAEA;;AAEA;AACA;;AAIA;AACA;AACA;;;AAGA;;;AAKA;;;;AAIA;ACrGA;;;;;AD8GA;;;AAKA;;;;;AAKA;;AAEA;;;;;;;AAOA;;AAIA;;AAEA;;;;;AAKA;;AAEA;;;AAUA;;AAmBA;;AAEA;AACA;;;;AAIA;AAEA;;;;;AAOA;AACA;;;;;;;AA0BA;AACA;AACA;;;;;;AAMA;AACA;;AAEA;;;;AAMA;;;;;;AAMA;;;;;AAvBA;AAkFA;;AAaA;AACA;;;;;AA4CA;AACA;AACA;;AAEA;AACA;AACA","sources":["webpack://charcoal-ui/./packages/react-sandbox/src/components/Layout/index.tsx","webpack://charcoal-ui/./packages/react-sandbox/src/foundation/constants.ts"],"sourcesContent":["import { useContext } from 'react'\nimport * as React from 'react'\nimport styled, { createGlobalStyle, css } from 'styled-components'\nimport {\n  MAIN_COLUMN_HORIZONTAL_MIN_MARGIN,\n  RESPONSIVE_LEFT_WIDTH,\n  RESPONSIVE_MAIN_MAX_WIDTH,\n} from '../../foundation/constants'\nimport { useMediaScreen1 } from '../../foundation/hooks'\nimport { columnSystem, COLUMN_UNIT, GUTTER_UNIT } from '@charcoal-ui/foundation'\nimport { maxWidth } from '@charcoal-ui/utils'\n\ninterface Props {\n  menu?: React.ReactNode\n  isHeaderTopMenu?: boolean\n  children: React.ReactNode\n  header?: React.ReactNode\n  wide?: boolean\n  center?: boolean\n}\n\nconst LayoutConfigContext = React.createContext({\n  wide: false,\n  center: false,\n  withLeft: false,\n})\n\nexport default function Layout({\n  menu,\n  children,\n  header,\n  center = false,\n  wide,\n  isHeaderTopMenu = false,\n}: Props) {\n  const config = {\n    center,\n    wide: center ? true : wide ?? false,\n    withLeft: menu != null && !isHeaderTopMenu,\n  }\n  return (\n    <LayoutRoot>\n      <LayoutConfigContext.Provider value={config}>\n        {config.withLeft && <LeftArea>{menu}</LeftArea>}\n        <MainArea center={center}>\n          {header != null && <Header>{header}</Header>}\n          {isHeaderTopMenu && (\n            <HeaderTopMenuContainer>{menu}</HeaderTopMenuContainer>\n          )}\n          <Grid>{children}</Grid>\n        </MainArea>\n      </LayoutConfigContext.Provider>\n      <GlobalStyle />\n    </LayoutRoot>\n  )\n}\n\nconst HeaderTopMenuContainer = styled.div`\n  margin-bottom: 40px;\n  overflow-x: auto;\n  word-break: keep-all;\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    margin-bottom: 0;\n    padding-left: 16px;\n    padding-bottom: 16px;\n    background-color: ${({ theme }) => theme.color.surface2};\n  }\n`\n\nconst GlobalStyle = createGlobalStyle`\n  :root {\n    background-color: ${({ theme }) => theme.color.background2};\n\n    @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n      background-color: ${({ theme }) => theme.color.background1};\n    }\n  }\n`\n\nconst LayoutRoot = styled.div`\n  display: flex;\n  background-color: ${({ theme }) => theme.color.background2};\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    background-color: ${({ theme }) => theme.color.background1};\n  }\n`\n\nconst LeftArea = styled.div`\n  min-width: ${RESPONSIVE_LEFT_WIDTH}px;\n  padding: 40px 0 40px ${GUTTER_UNIT}px;\n  box-sizing: border-box;\n\n  @media ${({ theme }) => theme.breakpoint.screen3} {\n    display: none;\n  }\n`\n\nconst MainArea = styled.div<{ center: boolean }>`\n  flex-grow: 1;\n  /* https://www.w3.org/TR/css-flexbox-1/#min-size-auto */\n  min-width: 0;\n  max-width: ${(p) =>\n    p.center\n      ? columnSystem(6, COLUMN_UNIT, GUTTER_UNIT)\n      : RESPONSIVE_MAIN_MAX_WIDTH}px;\n  padding: 40px ${MAIN_COLUMN_HORIZONTAL_MIN_MARGIN}px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    padding: 0;\n  }\n`\n\nconst Header = styled.div`\n  font-weight: bold;\n  margin-bottom: 12px;\n  font-size: 20px;\n  line-height: 28px;\n  color: ${({ theme }) => theme.color.text2};\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    margin-bottom: 0;\n    padding: 12px;\n    font-size: 16px;\n    line-height: 24px;\n    display: flex;\n    justify-content: center;\n    background-color: ${({ theme }) => theme.color.surface2};\n  }\n`\n\nconst Grid = styled.div`\n  display: grid;\n  gap: ${GUTTER_UNIT}px;\n  grid-template-columns: 1fr;\n  grid-auto-columns: 1fr;\n  grid-auto-rows: auto;\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    gap: 0;\n    background-color: ${({ theme }) => theme.color.background1};\n    padding-bottom: 60px;\n  }\n`\n\ninterface LayoutItemProps {\n  span: number\n  children?: React.ReactNode\n}\n\nexport const LayoutItem = React.forwardRef<HTMLDivElement, LayoutItemProps>(\n  function LayoutItem({ span, children }, ref) {\n    const { withLeft } = useContext(LayoutConfigContext)\n\n    return (\n      <StyledLayoutItem span={span} withLeft={withLeft} ref={ref}>\n        {children}\n      </StyledLayoutItem>\n    )\n  }\n)\n\ninterface StyledLayoutItemProps {\n  span: number\n  withLeft: boolean\n}\n\nconst StyledLayoutItem = styled.div<StyledLayoutItemProps>`\n  grid-column-start: auto;\n  grid-column-end: span ${(p) => p.span};\n  border-radius: 24px;\n  color: ${({ theme }) => theme.color.text2};\n  background-color: ${({ theme }) => theme.color.background1};\n  /* https://www.w3.org/TR/css-grid-1/#min-size-auto */\n  min-width: 0;\n\n  @media ${(p) =>\n      p.withLeft ? p.theme.breakpoint.screen4 : p.theme.breakpoint.screen3} {\n    ${(p) =>\n      p.span > 2 &&\n      css`\n        grid-column-end: span 2;\n      `}\n  }\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    ${(p) =>\n      p.span > 1 &&\n      css`\n        grid-column-end: span 1;\n      `}\n\n    border-radius: 0;\n    padding-bottom: 40px;\n  }\n`\n\nexport function LayoutItemHeader({ children }: { children: React.ReactNode }) {\n  const { wide, center } = useContext(LayoutConfigContext)\n\n  return (\n    <StyledLayoutItemHeader wide={wide} center={center}>\n      {children}\n    </StyledLayoutItemHeader>\n  )\n}\n\ninterface StyledLayoutItemHeaderProps {\n  wide: boolean\n  center: boolean\n}\n\nconst StyledLayoutItemHeader = styled.div<StyledLayoutItemHeaderProps>`\n  padding: 0 ${(p) => (p.wide ? 40 : 24)}px;\n  height: ${(p) => (p.wide ? 64 : 48)}px;\n  display: grid;\n  align-items: center;\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: bold;\n  background-color: ${({ theme }) => theme.color.surface2};\n  color: ${({ theme }) => theme.color.text2};\n  border-radius: 24px 24px 0 0;\n  ${(p) =>\n    p.center &&\n    css`\n      justify-content: center;\n    `}\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    margin-top: 4px;\n    padding: 0 16px;\n    background: none;\n    overflow-x: auto;\n    border-radius: unset;\n    ${(p) =>\n      p.wide &&\n      css`\n        height: 48px;\n        margin-top: 0;\n      `}\n  }\n`\n\nexport const LAYOUT_ITEM_BODY_PADDING = {\n  wide: {\n    x: 40,\n    y: 40,\n  },\n  default: {\n    x: 24,\n    y: 24,\n  },\n  column1: {\n    x: 16,\n    y: 16,\n  },\n  narrow: {\n    x: 24,\n    yTop: 12,\n    yBottom: 20,\n  },\n  narrowColumn1: {\n    x: 16,\n    yTop: 4,\n    yBottom: 0,\n  },\n}\n\nexport function LayoutItemBody({\n  children,\n  horizontal = false,\n  narrow = false,\n}: {\n  children: React.ReactNode\n  horizontal?: boolean\n  narrow?: boolean\n}) {\n  const { wide } = useContext(LayoutConfigContext)\n\n  return (\n    <StyledLayoutItemBody wide={wide} horizontal={horizontal} narrow={narrow}>\n      {children}\n    </StyledLayoutItemBody>\n  )\n}\n\ninterface StyledLayoutItemBodyProps {\n  wide: boolean\n  horizontal: boolean\n  narrow: boolean\n}\n\nexport const StyledLayoutItemBody = styled.div<StyledLayoutItemBodyProps>`\n  padding: ${(p) =>\n    p.narrow\n      ? `${LAYOUT_ITEM_BODY_PADDING.narrow.yTop}px ${\n          p.horizontal ? 0 : LAYOUT_ITEM_BODY_PADDING.narrow.x\n        }px ${LAYOUT_ITEM_BODY_PADDING.narrow.yBottom}px`\n      : p.wide\n      ? `${p.horizontal ? 0 : LAYOUT_ITEM_BODY_PADDING.wide.y}px ${\n          LAYOUT_ITEM_BODY_PADDING.wide.x\n        }px`\n      : `${p.horizontal ? 0 : LAYOUT_ITEM_BODY_PADDING.default.y}px ${\n          LAYOUT_ITEM_BODY_PADDING.default.x\n        }px`};\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    padding: ${(p) =>\n      p.narrow\n        ? `${LAYOUT_ITEM_BODY_PADDING.narrowColumn1.yTop}px ${\n            p.horizontal ? 0 : LAYOUT_ITEM_BODY_PADDING.narrowColumn1.x\n          }px ${LAYOUT_ITEM_BODY_PADDING.narrowColumn1.yBottom}px`\n        : `${LAYOUT_ITEM_BODY_PADDING.column1.y}px ${\n            LAYOUT_ITEM_BODY_PADDING.column1.x\n          }px ${0}`};\n  }\n\n  width: 100%;\n  box-sizing: border-box;\n`\n\nexport function useLayoutItemBodyPadding() {\n  const { wide } = useContext(LayoutConfigContext)\n  return useMediaScreen1()\n    ? LAYOUT_ITEM_BODY_PADDING.column1\n    : wide\n    ? LAYOUT_ITEM_BODY_PADDING.wide\n    : LAYOUT_ITEM_BODY_PADDING.default\n}\n\nexport function CancelLayoutItemBodyPadding({\n  children,\n  cancelTop,\n}: {\n  children: React.ReactNode\n  cancelTop?: boolean\n}) {\n  const { wide } = useContext(LayoutConfigContext)\n\n  return (\n    <StyledCancelLayoutItemBodyPadding wide={wide} cancelTop={cancelTop}>\n      {children}\n    </StyledCancelLayoutItemBodyPadding>\n  )\n}\n\ninterface StyledCancelLayoutItemBodyPaddingProps {\n  wide: boolean\n  cancelTop?: boolean\n}\n\nexport const StyledCancelLayoutItemBodyPadding = styled.div<StyledCancelLayoutItemBodyPaddingProps>`\n  margin: 0 -${(p) => (p.wide ? LAYOUT_ITEM_BODY_PADDING.wide.x : LAYOUT_ITEM_BODY_PADDING.default.x)}px;\n  margin-top: -${({ cancelTop = false, wide }) => (!cancelTop ? 0 : wide ? LAYOUT_ITEM_BODY_PADDING.wide.y : LAYOUT_ITEM_BODY_PADDING.default.y)}px;\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    margin: 0 -${LAYOUT_ITEM_BODY_PADDING.column1.x}px;\n    margin-top: -${({ cancelTop = false }) => (!cancelTop ? 0 : LAYOUT_ITEM_BODY_PADDING.column1.x)}px;\n  }\n`\n","import { columnSystem, COLUMN_UNIT, GUTTER_UNIT } from '@charcoal-ui/foundation'\n\nexport const MAIN_COLUMN_HORIZONTAL_MIN_MARGIN = 72\n\nexport const RESPONSIVE_LEFT_WIDTH =\n  columnSystem(2, COLUMN_UNIT, GUTTER_UNIT) + GUTTER_UNIT\nexport const RESPONSIVE_MAIN_MAX_WIDTH = columnSystem(\n  12,\n  COLUMN_UNIT,\n  GUTTER_UNIT\n)\n"],"names":[],"sourceRoot":""}